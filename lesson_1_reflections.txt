How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Highlights all of the items that have been changed between two file versions. Use diff -u for a better listing than 
    just diff.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Easily what changed in the file over time, or figure out when a bug was introduced.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Can logically choose when and what to save in each committ, but prone to human error of not saving often enough, or
    not saving at all and then losing work. 

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Google docs can operate as a stand alone application, while with most programming projects the applications requires
    all of the files in order to work properly. 


How can you use the commands git log and git diff to view the history of files?

    git log shows the history of all committs for that repository. While git diff shows the differences between two
    specific commmits. It will highlight the lines added and the lines deleted. 

How might using version control make you more confident to make changes that
could break something?

    It's very easy to checkout a previous committ that is a working state, so if you break something it's easy to revert
    back to some working copy. 

Now that you have your workspace set up, what do you want to try using Git for?

    Learning the git commands better and how to move around the head. 



    git log --stat

Git Errors and Warnings Solution

Should not be doing an octopus
Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try 
to use this strategy in an inappropriate situation.

You are in 'detached HEAD' state
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, 
which we’ll see in the next video. Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git 
just warns you so that you’ll realize you’re doing it.

Panic! (the 'impossible' happened)
This is a real error message, but it’s not output by Git. Instead it’s output by GHC, the compiler for a programming 
language called Haskell. It’s reserved for particularly surprising errors!
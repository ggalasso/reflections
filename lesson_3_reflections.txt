When would you want to create a remote repository rather than keeping all your work local?

	Lots of possibilities, working on multiple computers, working with multiple people, to backup your code,
	to make your work public, and plenty of other scenarios. 
  
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your 
remote repository?

	You might be working on something that got updated, but you want to finish your update before merging together the 
	new changes. 


Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Forks are strictly from one github repo to another. Cloning is used to clone a github repository to your local
	workspace. Branches are used to take an existing repository and add some changes to it that you don't want to commit
	and push right away to the master branch. Once you've implemented all of your features you can either merge with the
	master branch or discard your branch and switch back to the master. You use forking when you want an independent
	copy of a repository (for example if you don't have rights but want to modify someone elses project). Cloning is to
	copy a repo from the Github servers down to your local machine, and you branch when you want to add new features
	that will (perhaps temporarily) be seperate from the master branch.

What is the benefit of having a copy of the last known state of the remote stored locally?

	You can compare the local copy to the remote at some later point to see what changes have been made. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	It would be harder to collaborate without using a tool like Github. It would be harder to track what is changed
	and propose new changes. It would be harder to get the changes someone else made and incorporate them into your own
	changes and it would also be harder to send changes to another user. You might have to send the files and mention
	what was changed. 


When would you want to make changes in a separate branch rather than directly in master? What benefits does each 
approach have?
	
	You should use a seperate branch to isolate your changes from the master, especially if you're going to make several
	commits, or experimeting with changes that you don't want to introduce to other collaborators. Contributing directly
	to master should be done when you know the changes you are making are ones that will be used in the project. 


	/*-------------------------------------------
	COMMANDS 
	-------------------------------------------*/

	//Pulling -- remote and branch
	git pull origin master

	//Cloning
	git clone adress_from_github
	//Check remote settings
	git remote
	git remote -v

	//Update local copy with code on github for origin remote
	git fetch origin
	//Merge conflicts
	git merge origin/master master
	//Does the fetch and merge for you
	git pull origin/master

	//Compare versions
	git log origin/master
	git diff origin/master master

	//Push up to master on github
	git push origin master

	//fast forward merges
	A is in the path from B, A needs to be reachable by B in order to a fast forward merge

	//Branch and push to a different branch
	git branch different-branch
	git checkout different-branch
		//make some changes
	git add some_file
	git commit
	git push origin different-branch

	//Add a new remote called upstream
	git remote add upstream https://github.com/udacity/create-your-own-adventure.git
	//Check if it's added
	git remote -v
	//Make sure the two branches are up to date
	git pull upstream master


	//Git check status
	git status
	//Shorthand -- A for staged, ?? for not tracked, M for modified, two columns, right hand is working tree and left is
	//staging area. So an MM would indicate it was modified and staged, and then modified again. 
	git status -s
	git status --short

	//Show more detail about remotes
	git remote show origin
	//Rename a remote
	git remote rename oldname newname
	//Remove remote
	git remote rm name

	/*---------------
	Tagging
	----------------*/
	//show tags
	git tag
	//for specific tags with a v1.8.5 in them
	git tag -l "v1.8.5*"
	//Two types of tags, annotated and lightweight, they suggest using annotated in most instances
	//Create annotated tag
	git tag -a v1.4 -m "commit msg"
	//Lightweight tag, don't use -a, -s, or -m options
	git tag v1.4
	//Tag commit after the fact
	git tag -a v1.4 commitCheckSum#
	//Tags have to be pushed to remote servers
	git push origin [tagname]
	//Push all tags to remote
	git push origin --tags
	//Checkout a specific tag and create a branch of it
	git checkout -b [branchname] [tagname]

	//Setting Git Aliases
	git config --global alias.co checkout
	git config --global alias.br branch
	git config --global alias.ci commit
	git config --global alias.st status
	git config --global alias.unstage 'reset HEAD --'
	//External command rather than git sub command
	git config --global alias.visual '!gitk'


	//Git merge tool - show list of possible merge tools
	git mergetool
	//See branches that have been merged
	git branch --merged
	//Branches not merged
	git branch --no-merged
	//Trying to delete a branch that isn't merged will result in an error message
	git branch -d branch_name
	//Force delete it
	git branch -D branch_name
	//list all remote branches
	git ls-remote
	//Track a remote branch
	git checkout --track remote_name/branch_name
	//Tracking branches
	git branch -vv

	//Check for whitespace errors on commits (run before committing)
	git diff --check





